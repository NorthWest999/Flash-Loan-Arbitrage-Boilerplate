require("dotenv").config();
const { ethers } = require("ethers");
const axios = require("axios");

// Lade Umgebungsvariablen
const INFURA_PROJECT_ID = process.env.INFURA_PROJECT_ID;
const PRIVATE_KEY = process.env.PRIVATE_KEY;
const CHAINLINK_CONTRACT_ADDRESS = process.env.CHAINLINK_CONTRACT_ADDRESS;
const FLASH_LOAN_ARBITRAGE_CONTRACT_ADDRESS = process.env.FLASH_LOAN_ARBITRAGE_CONTRACT_ADDRESS;

// Ethereum Provider (z.B. Infura)
const provider = new ethers.providers.JsonRpcProvider(`https://mainnet.infura.io/v3/${INFURA_PROJECT_ID}`);

// Wallet und Signer
const wallet = new ethers.Wallet(PRIVATE_KEY, provider);

// ABIs der Contracts
const ChainlinkABI = [
  // Minimal ABI f端r Price Feed
  "function getLatestPrice() view returns (int256)"
];
const FlashLoanArbitrageABI = [
  // Minimal ABI f端r Arbitrage Contract
  "function executeArbitrage(uint256 priceA, uint256 priceB) external"
];

// Contract-Instanzen
const priceConsumer = new ethers.Contract(CHAINLINK_CONTRACT_ADDRESS, ChainlinkABI, provider);
const flashLoanArbitrage = new ethers.Contract(FLASH_LOAN_ARBITRAGE_CONTRACT_ADDRESS, FlashLoanArbitrageABI, wallet);

async function checkArbitrage() {
  try {
    // Abrufen der Preise
    const priceA = await priceConsumer.getLatestPrice(); // Chainlink-Preis A
    const response = await axios.get("https://api.exchangeB.com/price"); // API von Exchange B
    const priceB = ethers.utils.parseUnits(response.data.price.toString(), 8); // Konvertiere Preis von Exchange B

    console.log(`Price A (Chainlink): ${ethers.utils.formatUnits(priceA, 8)}`);
    console.log(`Price B (Exchange B): ${ethers.utils.formatUnits(priceB, 8)}`);

    // Arbitrage-Bedingung pr端fen
    if (priceA < priceB) {
      console.log("Arbitrage opportunity detected!");

      // Transaktion senden, um Arbitrage auszuf端hren
      const tx = await flashLoanArbitrage.executeArbitrage(priceA, priceB, {
        gasLimit: 300000
      });
      console.log(`Transaction sent: ${tx.hash}`);
      await tx.wait();
      console.log("Arbitrage executed successfully!");
    } else {
      console.log("No arbitrage opportunity.");
    }
  } catch (error) {
    console.error("Error in checkArbitrage:", error.message);
  }
}

// Bot in Intervallen laufen lassen
setInterval(checkArbitrage, 60000); // Alle 60 Sekunden
